/**
 * Shamelessly stolen from:
 * https://www.shadertoy.com/view/XlfGRj
 */
export var vertex = /* glsl */ "\n        varying vec2 vUv;\n\n\t\tvoid main() {\n            vUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}";
export var fragment = /* glsl */ "\n\n        varying vec2 vUv;\n\t\t\n        #define iterations 17\n        #define formuparam 0.53\n\n        #define volsteps 20\n        #define stepsize 0.1\n\n        #define zoom   0.8\n        #define tile   0.9\n        #define speed  0.010 \n\n        #define brightness 0.0015\n        #define darkmatter 0.300\n        #define distfading 0.730\n        #define saturation 0.850\n\n\t\tvoid main() {\n\n            //get coords and direction\n            vec2 uv = vUv;\n            vec3 dir=vec3(uv*zoom,1.);\n\n            // orientation\n            vec3 from=vec3(1.,.5,0.5);\n            \n            //volumetric rendering\n            float s=0.1,fade=1.;\n            vec3 v=vec3(0.);\n            for (int r=0; r<volsteps; r++) {\n                vec3 p=from+s*dir*.5;\n                p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n                float pa,a=pa=0.;\n                for (int i=0; i<iterations; i++) { \n                    p=abs(p)/dot(p,p)-formuparam; // the magic formula\n                    a+=abs(length(p)-pa); // absolute sum of average change\n                    pa=length(p);\n                }\n                float dm=max(0.,darkmatter-a*a*.001); //dark matter\n                a*=a*a; // add contrast\n                if (r>6) fade*=1.-dm; // dark matter, don't render near\n                //v+=vec3(dm,dm*.5,0.);\n                v+=fade;\n                v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n                fade*=distfading; // distance fading\n                s+=stepsize;\n            }\n            v=mix(vec3(length(v)),v,saturation); //color adjust\n\n            // Clamp max value to minimize star popping\n            gl_FragColor = vec4(min(v*.00035, 0.3),1.0);\t\n\t\t}";
